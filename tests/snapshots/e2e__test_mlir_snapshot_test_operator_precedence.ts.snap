---
source: tests/e2e.rs
expression: "String::from_utf8(cmd.ok().unwrap().stdout)?"
---
module attributes {llvm.data_layout = ""} {
  llvm.func @fdopen(i32, !llvm.ptr) -> !llvm.ptr attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fclose(!llvm.ptr) attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fwrite(!llvm.ptr, i32, i32, !llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sprintf(!llvm.ptr, !llvm.ptr, i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fflush(!llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sleep(i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.mlir.global internal @annonstr0("w") {addr_space = 0 : i32}
  llvm.func @print(%arg0: !llvm.ptr, %arg1: i32) {
    %0 = llvm.mlir.constant(1 : index) : i64
    %1 = llvm.alloca %0 x !llvm.ptr : (i64) -> !llvm.ptr
    %2 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(ptr, ptr, i64)> 
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.insertvalue %5, %4[2] : !llvm.struct<(ptr, ptr, i64)> 
    %7 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg0, %7 : !llvm.ptr, !llvm.ptr
    %8 = llvm.mlir.constant(1 : index) : i64
    %9 = llvm.alloca %8 x i32 : (i64) -> !llvm.ptr
    %10 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %11 = llvm.insertvalue %9, %10[0] : !llvm.struct<(ptr, ptr, i64)> 
    %12 = llvm.insertvalue %9, %11[1] : !llvm.struct<(ptr, ptr, i64)> 
    %13 = llvm.mlir.constant(0 : index) : i64
    %14 = llvm.insertvalue %13, %12[2] : !llvm.struct<(ptr, ptr, i64)> 
    %15 = llvm.extractvalue %14[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg1, %15 : i32, !llvm.ptr
    %16 = llvm.mlir.constant(1 : i32) : i32
    %17 = llvm.mlir.addressof @annonstr0 : !llvm.ptr
    %18 = llvm.call @fdopen(%16, %17) : (i32, !llvm.ptr) -> !llvm.ptr
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.alloca %19 x !llvm.ptr : (i64) -> !llvm.ptr
    %21 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %22 = llvm.insertvalue %20, %21[0] : !llvm.struct<(ptr, ptr, i64)> 
    %23 = llvm.insertvalue %20, %22[1] : !llvm.struct<(ptr, ptr, i64)> 
    %24 = llvm.mlir.constant(0 : index) : i64
    %25 = llvm.insertvalue %24, %23[2] : !llvm.struct<(ptr, ptr, i64)> 
    %26 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %18, %26 : !llvm.ptr, !llvm.ptr
    %27 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    %28 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.extractvalue %14[1] : !llvm.struct<(ptr, ptr, i64)> 
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.mlir.constant(1 : i32) : i32
    %32 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.call @fwrite(%28, %30, %31, %33) : (!llvm.ptr, i32, i32, !llvm.ptr) -> i32
    llvm.return
  }
  llvm.mlir.global internal @annonstr1("resultb: %d \0A") {addr_space = 0 : i32}
  llvm.func @main() attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.constant(2 : i32) : i32
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.alloca %1 x i32 : (i64) -> !llvm.ptr
    %3 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %4 = llvm.insertvalue %2, %3[0] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.insertvalue %2, %4[1] : !llvm.struct<(ptr, ptr, i64)> 
    %6 = llvm.mlir.constant(0 : index) : i64
    %7 = llvm.insertvalue %6, %5[2] : !llvm.struct<(ptr, ptr, i64)> 
    %8 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %0, %8 : i32, !llvm.ptr
    %9 = llvm.mlir.constant(4 : i32) : i32
    %10 = llvm.mlir.constant(1 : index) : i64
    %11 = llvm.alloca %10 x i32 : (i64) -> !llvm.ptr
    %12 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %13 = llvm.insertvalue %11, %12[0] : !llvm.struct<(ptr, ptr, i64)> 
    %14 = llvm.insertvalue %11, %13[1] : !llvm.struct<(ptr, ptr, i64)> 
    %15 = llvm.mlir.constant(0 : index) : i64
    %16 = llvm.insertvalue %15, %14[2] : !llvm.struct<(ptr, ptr, i64)> 
    %17 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %9, %17 : i32, !llvm.ptr
    %18 = llvm.mlir.constant(3 : i32) : i32
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.alloca %19 x i32 : (i64) -> !llvm.ptr
    %21 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %22 = llvm.insertvalue %20, %21[0] : !llvm.struct<(ptr, ptr, i64)> 
    %23 = llvm.insertvalue %20, %22[1] : !llvm.struct<(ptr, ptr, i64)> 
    %24 = llvm.mlir.constant(0 : index) : i64
    %25 = llvm.insertvalue %24, %23[2] : !llvm.struct<(ptr, ptr, i64)> 
    %26 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %18, %26 : i32, !llvm.ptr
    %27 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %28 = llvm.load %27 : !llvm.ptr -> i32
    %29 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.add %28, %30  : i32
    %32 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64)> 
    %33 = llvm.load %32 : !llvm.ptr -> i32
    %34 = llvm.mul %31, %33  : i32
    %35 = llvm.mlir.constant(1 : index) : i64
    %36 = llvm.alloca %35 x i32 : (i64) -> !llvm.ptr
    %37 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %38 = llvm.insertvalue %36, %37[0] : !llvm.struct<(ptr, ptr, i64)> 
    %39 = llvm.insertvalue %36, %38[1] : !llvm.struct<(ptr, ptr, i64)> 
    %40 = llvm.mlir.constant(0 : index) : i64
    %41 = llvm.insertvalue %40, %39[2] : !llvm.struct<(ptr, ptr, i64)> 
    %42 = llvm.extractvalue %41[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %34, %42 : i32, !llvm.ptr
    %43 = llvm.mlir.addressof @annonstr1 : !llvm.ptr
    %44 = llvm.mlir.constant(1 : index) : i64
    %45 = llvm.alloca %44 x !llvm.ptr : (i64) -> !llvm.ptr
    %46 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %47 = llvm.insertvalue %45, %46[0] : !llvm.struct<(ptr, ptr, i64)> 
    %48 = llvm.insertvalue %45, %47[1] : !llvm.struct<(ptr, ptr, i64)> 
    %49 = llvm.mlir.constant(0 : index) : i64
    %50 = llvm.insertvalue %49, %48[2] : !llvm.struct<(ptr, ptr, i64)> 
    %51 = llvm.extractvalue %50[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %43, %51 : !llvm.ptr, !llvm.ptr
    %52 = llvm.extractvalue %50[1] : !llvm.struct<(ptr, ptr, i64)> 
    %53 = llvm.load %52 : !llvm.ptr -> !llvm.ptr
    %54 = llvm.extractvalue %50[1] : !llvm.struct<(ptr, ptr, i64)> 
    %55 = llvm.load %54 : !llvm.ptr -> !llvm.ptr
    %56 = llvm.extractvalue %41[1] : !llvm.struct<(ptr, ptr, i64)> 
    %57 = llvm.load %56 : !llvm.ptr -> i32
    %58 = llvm.call @sprintf(%53, %55, %57) : (!llvm.ptr, !llvm.ptr, i32) -> i32
    %59 = llvm.extractvalue %50[1] : !llvm.struct<(ptr, ptr, i64)> 
    %60 = llvm.load %59 : !llvm.ptr -> !llvm.ptr
    %61 = llvm.mlir.constant(13 : i32) : i32
    llvm.call @print(%60, %61) : (!llvm.ptr, i32) -> ()
    llvm.return
  }
  llvm.func @_mlir_ciface_main() attributes {llvm.emit_c_interface} {
    llvm.call @main() : () -> ()
    llvm.return
  }
}


