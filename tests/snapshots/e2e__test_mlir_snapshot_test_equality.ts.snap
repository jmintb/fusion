---
source: tests/e2e.rs
expression: "String::from_utf8(cmd.ok().unwrap().stdout)?"
---
module attributes {llvm.data_layout = ""} {
  llvm.func @fdopen(i32, !llvm.ptr) -> !llvm.ptr attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fclose(!llvm.ptr) attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fwrite(!llvm.ptr, i32, i32, !llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sprintf(!llvm.ptr, !llvm.ptr, i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fflush(!llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sleep(i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.mlir.global internal @annonstr0("w") {addr_space = 0 : i32}
  llvm.func @print(%arg0: !llvm.ptr, %arg1: i32) {
    %0 = llvm.mlir.constant(1 : index) : i64
    %1 = llvm.alloca %0 x !llvm.ptr : (i64) -> !llvm.ptr
    %2 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(ptr, ptr, i64)> 
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.insertvalue %5, %4[2] : !llvm.struct<(ptr, ptr, i64)> 
    %7 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg0, %7 : !llvm.ptr, !llvm.ptr
    %8 = llvm.mlir.constant(1 : index) : i64
    %9 = llvm.alloca %8 x i32 : (i64) -> !llvm.ptr
    %10 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %11 = llvm.insertvalue %9, %10[0] : !llvm.struct<(ptr, ptr, i64)> 
    %12 = llvm.insertvalue %9, %11[1] : !llvm.struct<(ptr, ptr, i64)> 
    %13 = llvm.mlir.constant(0 : index) : i64
    %14 = llvm.insertvalue %13, %12[2] : !llvm.struct<(ptr, ptr, i64)> 
    %15 = llvm.extractvalue %14[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg1, %15 : i32, !llvm.ptr
    %16 = llvm.mlir.constant(1 : i32) : i32
    %17 = llvm.mlir.addressof @annonstr0 : !llvm.ptr
    %18 = llvm.call @fdopen(%16, %17) : (i32, !llvm.ptr) -> !llvm.ptr
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.alloca %19 x !llvm.ptr : (i64) -> !llvm.ptr
    %21 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %22 = llvm.insertvalue %20, %21[0] : !llvm.struct<(ptr, ptr, i64)> 
    %23 = llvm.insertvalue %20, %22[1] : !llvm.struct<(ptr, ptr, i64)> 
    %24 = llvm.mlir.constant(0 : index) : i64
    %25 = llvm.insertvalue %24, %23[2] : !llvm.struct<(ptr, ptr, i64)> 
    %26 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %18, %26 : !llvm.ptr, !llvm.ptr
    %27 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    %28 = llvm.load %27 : !llvm.ptr -> !llvm.ptr
    %29 = llvm.extractvalue %14[1] : !llvm.struct<(ptr, ptr, i64)> 
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.mlir.constant(1 : i32) : i32
    %32 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %33 = llvm.load %32 : !llvm.ptr -> !llvm.ptr
    %34 = llvm.call @fwrite(%28, %30, %31, %33) : (!llvm.ptr, i32, i32, !llvm.ptr) -> i32
    llvm.return
  }
  llvm.mlir.global internal @annonstr1("a equals b \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr2("a equals c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr3("a not equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr4("a greater than c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr5("a greater than or equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr6("a greater than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr7("c less than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr8("a less than or equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr9("a less than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr10("c less than a \0A") {addr_space = 0 : i32}
  llvm.func @main() attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.constant(2 : i32) : i32
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.alloca %1 x i32 : (i64) -> !llvm.ptr
    %3 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %4 = llvm.insertvalue %2, %3[0] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.insertvalue %2, %4[1] : !llvm.struct<(ptr, ptr, i64)> 
    %6 = llvm.mlir.constant(0 : index) : i64
    %7 = llvm.insertvalue %6, %5[2] : !llvm.struct<(ptr, ptr, i64)> 
    %8 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %0, %8 : i32, !llvm.ptr
    %9 = llvm.mlir.constant(2 : i32) : i32
    %10 = llvm.mlir.constant(1 : index) : i64
    %11 = llvm.alloca %10 x i32 : (i64) -> !llvm.ptr
    %12 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %13 = llvm.insertvalue %11, %12[0] : !llvm.struct<(ptr, ptr, i64)> 
    %14 = llvm.insertvalue %11, %13[1] : !llvm.struct<(ptr, ptr, i64)> 
    %15 = llvm.mlir.constant(0 : index) : i64
    %16 = llvm.insertvalue %15, %14[2] : !llvm.struct<(ptr, ptr, i64)> 
    %17 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %9, %17 : i32, !llvm.ptr
    %18 = llvm.mlir.constant(1 : i32) : i32
    %19 = llvm.mlir.constant(1 : index) : i64
    %20 = llvm.alloca %19 x i32 : (i64) -> !llvm.ptr
    %21 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %22 = llvm.insertvalue %20, %21[0] : !llvm.struct<(ptr, ptr, i64)> 
    %23 = llvm.insertvalue %20, %22[1] : !llvm.struct<(ptr, ptr, i64)> 
    %24 = llvm.mlir.constant(0 : index) : i64
    %25 = llvm.insertvalue %24, %23[2] : !llvm.struct<(ptr, ptr, i64)> 
    %26 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %18, %26 : i32, !llvm.ptr
    %27 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %28 = llvm.load %27 : !llvm.ptr -> i32
    %29 = llvm.extractvalue %16[1] : !llvm.struct<(ptr, ptr, i64)> 
    %30 = llvm.load %29 : !llvm.ptr -> i32
    %31 = llvm.icmp "eq" %28, %30 : i32
    llvm.cond_br %31, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %32 = llvm.mlir.addressof @annonstr1 : !llvm.ptr
    %33 = llvm.mlir.constant(12 : i32) : i32
    llvm.call @print(%32, %33) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb2
  ^bb2:  // 2 preds: ^bb0, ^bb1
    %34 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %35 = llvm.load %34 : !llvm.ptr -> i32
    %36 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %37 = llvm.load %36 : !llvm.ptr -> i32
    %38 = llvm.icmp "eq" %35, %37 : i32
    llvm.cond_br %38, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %39 = llvm.mlir.addressof @annonstr2 : !llvm.ptr
    %40 = llvm.mlir.constant(12 : i32) : i32
    llvm.call @print(%39, %40) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %41 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %42 = llvm.load %41 : !llvm.ptr -> i32
    %43 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %44 = llvm.load %43 : !llvm.ptr -> i32
    %45 = llvm.icmp "ne" %42, %44 : i32
    llvm.cond_br %45, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %46 = llvm.mlir.addressof @annonstr3 : !llvm.ptr
    %47 = llvm.mlir.constant(20 : i32) : i32
    llvm.call @print(%46, %47) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb6
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %48 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %49 = llvm.load %48 : !llvm.ptr -> i32
    %50 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %51 = llvm.load %50 : !llvm.ptr -> i32
    %52 = llvm.icmp "sgt" %49, %51 : i32
    llvm.cond_br %52, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %53 = llvm.mlir.addressof @annonstr4 : !llvm.ptr
    %54 = llvm.mlir.constant(18 : i32) : i32
    llvm.call @print(%53, %54) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb8
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %55 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %56 = llvm.load %55 : !llvm.ptr -> i32
    %57 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %58 = llvm.load %57 : !llvm.ptr -> i32
    %59 = llvm.icmp "sge" %56, %58 : i32
    llvm.cond_br %59, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %60 = llvm.mlir.addressof @annonstr5 : !llvm.ptr
    %61 = llvm.mlir.constant(30 : i32) : i32
    llvm.call @print(%60, %61) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb10
  ^bb10:  // 2 preds: ^bb8, ^bb9
    %62 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %63 = llvm.load %62 : !llvm.ptr -> i32
    %64 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %65 = llvm.load %64 : !llvm.ptr -> i32
    %66 = llvm.icmp "sge" %63, %65 : i32
    llvm.cond_br %66, ^bb11, ^bb12
  ^bb11:  // pred: ^bb10
    %67 = llvm.mlir.addressof @annonstr6 : !llvm.ptr
    %68 = llvm.mlir.constant(30 : i32) : i32
    llvm.call @print(%67, %68) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb12
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %69 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %70 = llvm.load %69 : !llvm.ptr -> i32
    %71 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %72 = llvm.load %71 : !llvm.ptr -> i32
    %73 = llvm.icmp "sle" %70, %72 : i32
    llvm.cond_br %73, ^bb13, ^bb14
  ^bb13:  // pred: ^bb12
    %74 = llvm.mlir.addressof @annonstr7 : !llvm.ptr
    %75 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%74, %75) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb14
  ^bb14:  // 2 preds: ^bb12, ^bb13
    %76 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %77 = llvm.load %76 : !llvm.ptr -> i32
    %78 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %79 = llvm.load %78 : !llvm.ptr -> i32
    %80 = llvm.icmp "sle" %77, %79 : i32
    llvm.cond_br %80, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %81 = llvm.mlir.addressof @annonstr8 : !llvm.ptr
    %82 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%81, %82) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb16
  ^bb16:  // 2 preds: ^bb14, ^bb15
    %83 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %84 = llvm.load %83 : !llvm.ptr -> i32
    %85 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %86 = llvm.load %85 : !llvm.ptr -> i32
    %87 = llvm.icmp "sle" %84, %86 : i32
    llvm.cond_br %87, ^bb17, ^bb18
  ^bb17:  // pred: ^bb16
    %88 = llvm.mlir.addressof @annonstr9 : !llvm.ptr
    %89 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%88, %89) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb18
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %90 = llvm.extractvalue %25[1] : !llvm.struct<(ptr, ptr, i64)> 
    %91 = llvm.load %90 : !llvm.ptr -> i32
    %92 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64)> 
    %93 = llvm.load %92 : !llvm.ptr -> i32
    %94 = llvm.icmp "slt" %91, %93 : i32
    llvm.cond_br %94, ^bb19, ^bb20
  ^bb19:  // pred: ^bb18
    %95 = llvm.mlir.addressof @annonstr10 : !llvm.ptr
    %96 = llvm.mlir.constant(18 : i32) : i32
    llvm.call @print(%95, %96) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb20
  ^bb20:  // 2 preds: ^bb18, ^bb19
    llvm.return
  }
  llvm.func @_mlir_ciface_main() attributes {llvm.emit_c_interface} {
    llvm.call @main() : () -> ()
    llvm.return
  }
}


