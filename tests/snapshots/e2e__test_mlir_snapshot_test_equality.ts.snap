---
source: tests/e2e.rs
expression: "String::from_utf8(cmd.ok().unwrap().stdout)?"
---
module attributes {llvm.data_layout = ""} {
  llvm.func @fdopen(i32, !llvm.ptr) -> !llvm.ptr attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fclose(!llvm.ptr) attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fwrite(!llvm.ptr, i32, i32, !llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sprintf(!llvm.ptr, !llvm.ptr, i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fflush(!llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sleep(i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.mlir.global internal @annonstr0("w") {addr_space = 0 : i32}
  llvm.func @print(%arg0: !llvm.ptr, %arg1: i32) {
    %0 = llvm.mlir.constant(1 : i32) : i32
    %1 = llvm.mlir.addressof @annonstr0 : !llvm.ptr
    %2 = llvm.call @fdopen(%0, %1) : (i32, !llvm.ptr) -> !llvm.ptr
    %3 = llvm.mlir.constant(1 : i32) : i32
    %4 = llvm.call @fwrite(%arg0, %arg1, %3, %2) : (!llvm.ptr, i32, i32, !llvm.ptr) -> i32
    llvm.return
  }
  llvm.mlir.global internal @annonstr1("a equals b \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr2("a equals c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr3("a not equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr4("a greater than c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr5("a greater than or equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr6("a greater than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr7("c less than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr8("a less than or equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr9("a less than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr10("c less than a \0A") {addr_space = 0 : i32}
  llvm.func @main() attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.constant(2 : i32) : i32
    %1 = llvm.mlir.constant(2 : i32) : i32
    %2 = llvm.mlir.constant(1 : i32) : i32
    %3 = llvm.mlir.constant(true) : i1
    llvm.cond_br %3, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %4 = llvm.mlir.addressof @annonstr1 : !llvm.ptr
    %5 = llvm.mlir.constant(12 : i32) : i32
    llvm.call @print(%4, %5) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb2
  ^bb2:  // 2 preds: ^bb0, ^bb1
    %6 = llvm.mlir.constant(false) : i1
    llvm.cond_br %6, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %7 = llvm.mlir.addressof @annonstr2 : !llvm.ptr
    %8 = llvm.mlir.constant(12 : i32) : i32
    llvm.call @print(%7, %8) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %9 = llvm.mlir.constant(true) : i1
    llvm.cond_br %9, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %10 = llvm.mlir.addressof @annonstr3 : !llvm.ptr
    %11 = llvm.mlir.constant(20 : i32) : i32
    llvm.call @print(%10, %11) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb6
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %12 = llvm.mlir.constant(true) : i1
    llvm.cond_br %12, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %13 = llvm.mlir.addressof @annonstr4 : !llvm.ptr
    %14 = llvm.mlir.constant(18 : i32) : i32
    llvm.call @print(%13, %14) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb8
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %15 = llvm.mlir.constant(true) : i1
    llvm.cond_br %15, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %16 = llvm.mlir.addressof @annonstr5 : !llvm.ptr
    %17 = llvm.mlir.constant(30 : i32) : i32
    llvm.call @print(%16, %17) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb10
  ^bb10:  // 2 preds: ^bb8, ^bb9
    %18 = llvm.mlir.constant(true) : i1
    llvm.cond_br %18, ^bb11, ^bb12
  ^bb11:  // pred: ^bb10
    %19 = llvm.mlir.addressof @annonstr6 : !llvm.ptr
    %20 = llvm.mlir.constant(30 : i32) : i32
    llvm.call @print(%19, %20) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb12
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %21 = llvm.mlir.constant(true) : i1
    llvm.cond_br %21, ^bb13, ^bb14
  ^bb13:  // pred: ^bb12
    %22 = llvm.mlir.addressof @annonstr7 : !llvm.ptr
    %23 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%22, %23) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb14
  ^bb14:  // 2 preds: ^bb12, ^bb13
    %24 = llvm.mlir.constant(false) : i1
    llvm.cond_br %24, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %25 = llvm.mlir.addressof @annonstr8 : !llvm.ptr
    %26 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%25, %26) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb16
  ^bb16:  // 2 preds: ^bb14, ^bb15
    %27 = llvm.mlir.constant(true) : i1
    llvm.cond_br %27, ^bb17, ^bb18
  ^bb17:  // pred: ^bb16
    %28 = llvm.mlir.addressof @annonstr9 : !llvm.ptr
    %29 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%28, %29) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb18
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %30 = llvm.mlir.constant(true) : i1
    llvm.cond_br %30, ^bb19, ^bb20
  ^bb19:  // pred: ^bb18
    %31 = llvm.mlir.addressof @annonstr10 : !llvm.ptr
    %32 = llvm.mlir.constant(18 : i32) : i32
    llvm.call @print(%31, %32) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb20
  ^bb20:  // 2 preds: ^bb18, ^bb19
    llvm.return
  }
  llvm.func @_mlir_ciface_main() attributes {llvm.emit_c_interface} {
    llvm.call @main() : () -> ()
    llvm.return
  }
}


