---
source: crates/compiler/src/backend/mlir/codegen.rs
expression: "format!(\"{}\", mlir_output)"
---
module {
  llvm.func @fdopen(i32, !llvm.ptr) -> !llvm.ptr attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fclose(!llvm.ptr) attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fwrite(!llvm.ptr, i32, i32, !llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sprintf(!llvm.ptr, !llvm.ptr, i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fflush(!llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sleep(i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.mlir.global internal @annonstr0("w") {addr_space = 0 : i32}
  llvm.func @print(%arg0: !llvm.ptr, %arg1: i32) {
    %0 = llvm.mlir.constant(1 : index) : i64
    %1 = llvm.alloca %0 x !llvm.ptr : (i64) -> !llvm.ptr
    %2 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(ptr, ptr, i64)> 
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.insertvalue %5, %4[2] : !llvm.struct<(ptr, ptr, i64)> 
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.alloca %7 x i32 : (i64) -> !llvm.ptr
    %9 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %10 = llvm.insertvalue %8, %9[0] : !llvm.struct<(ptr, ptr, i64)> 
    %11 = llvm.insertvalue %8, %10[1] : !llvm.struct<(ptr, ptr, i64)> 
    %12 = llvm.mlir.constant(0 : index) : i64
    %13 = llvm.insertvalue %12, %11[2] : !llvm.struct<(ptr, ptr, i64)> 
    %14 = llvm.mlir.constant(1 : index) : i64
    %15 = llvm.alloca %14 x i32 : (i64) -> !llvm.ptr
    %16 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %17 = llvm.insertvalue %15, %16[0] : !llvm.struct<(ptr, ptr, i64)> 
    %18 = llvm.insertvalue %15, %17[1] : !llvm.struct<(ptr, ptr, i64)> 
    %19 = llvm.mlir.constant(0 : index) : i64
    %20 = llvm.insertvalue %19, %18[2] : !llvm.struct<(ptr, ptr, i64)> 
    %21 = llvm.mlir.constant(1 : i32) : i32
    %22 = llvm.extractvalue %20[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %21, %22 : i32, !llvm.ptr
    %23 = llvm.mlir.constant(1 : index) : i64
    %24 = llvm.alloca %23 x !llvm.ptr : (i64) -> !llvm.ptr
    %25 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %26 = llvm.insertvalue %24, %25[0] : !llvm.struct<(ptr, ptr, i64)> 
    %27 = llvm.insertvalue %24, %26[1] : !llvm.struct<(ptr, ptr, i64)> 
    %28 = llvm.mlir.constant(0 : index) : i64
    %29 = llvm.insertvalue %28, %27[2] : !llvm.struct<(ptr, ptr, i64)> 
    %30 = llvm.mlir.addressof @annonstr0 : !llvm.ptr
    %31 = llvm.extractvalue %29[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %30, %31 : !llvm.ptr, !llvm.ptr
    %32 = llvm.mlir.constant(1 : index) : i64
    %33 = llvm.alloca %32 x !llvm.ptr : (i64) -> !llvm.ptr
    %34 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %35 = llvm.insertvalue %33, %34[0] : !llvm.struct<(ptr, ptr, i64)> 
    %36 = llvm.insertvalue %33, %35[1] : !llvm.struct<(ptr, ptr, i64)> 
    %37 = llvm.mlir.constant(0 : index) : i64
    %38 = llvm.insertvalue %37, %36[2] : !llvm.struct<(ptr, ptr, i64)> 
    %39 = llvm.mlir.constant(1 : index) : i64
    %40 = llvm.alloca %39 x !llvm.ptr : (i64) -> !llvm.ptr
    %41 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %42 = llvm.insertvalue %40, %41[0] : !llvm.struct<(ptr, ptr, i64)> 
    %43 = llvm.insertvalue %40, %42[1] : !llvm.struct<(ptr, ptr, i64)> 
    %44 = llvm.mlir.constant(0 : index) : i64
    %45 = llvm.insertvalue %44, %43[2] : !llvm.struct<(ptr, ptr, i64)> 
    %46 = llvm.mlir.constant(1 : index) : i64
    %47 = llvm.alloca %46 x i32 : (i64) -> !llvm.ptr
    %48 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %49 = llvm.insertvalue %47, %48[0] : !llvm.struct<(ptr, ptr, i64)> 
    %50 = llvm.insertvalue %47, %49[1] : !llvm.struct<(ptr, ptr, i64)> 
    %51 = llvm.mlir.constant(0 : index) : i64
    %52 = llvm.insertvalue %51, %50[2] : !llvm.struct<(ptr, ptr, i64)> 
    %53 = llvm.mlir.constant(1 : i32) : i32
    %54 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %53, %54 : i32, !llvm.ptr
    %55 = llvm.mlir.constant(1 : index) : i64
    %56 = llvm.alloca %55 x i32 : (i64) -> !llvm.ptr
    %57 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %58 = llvm.insertvalue %56, %57[0] : !llvm.struct<(ptr, ptr, i64)> 
    %59 = llvm.insertvalue %56, %58[1] : !llvm.struct<(ptr, ptr, i64)> 
    %60 = llvm.mlir.constant(0 : index) : i64
    %61 = llvm.insertvalue %60, %59[2] : !llvm.struct<(ptr, ptr, i64)> 
    %62 = llvm.mlir.constant(1 : index) : i64
    %63 = llvm.alloca %62 x !llvm.ptr : (i64) -> !llvm.ptr
    %64 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %65 = llvm.insertvalue %63, %64[0] : !llvm.struct<(ptr, ptr, i64)> 
    %66 = llvm.insertvalue %63, %65[1] : !llvm.struct<(ptr, ptr, i64)> 
    %67 = llvm.mlir.constant(0 : index) : i64
    %68 = llvm.insertvalue %67, %66[2] : !llvm.struct<(ptr, ptr, i64)> 
    %69 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg0, %69 : !llvm.ptr, !llvm.ptr
    %70 = llvm.mlir.constant(1 : index) : i64
    %71 = llvm.alloca %70 x i32 : (i64) -> !llvm.ptr
    %72 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %73 = llvm.insertvalue %71, %72[0] : !llvm.struct<(ptr, ptr, i64)> 
    %74 = llvm.insertvalue %71, %73[1] : !llvm.struct<(ptr, ptr, i64)> 
    %75 = llvm.mlir.constant(0 : index) : i64
    %76 = llvm.insertvalue %75, %74[2] : !llvm.struct<(ptr, ptr, i64)> 
    %77 = llvm.extractvalue %13[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg1, %77 : i32, !llvm.ptr
    %78 = llvm.extractvalue %20[1] : !llvm.struct<(ptr, ptr, i64)> 
    %79 = llvm.load %78 : !llvm.ptr -> i32
    %80 = llvm.extractvalue %29[1] : !llvm.struct<(ptr, ptr, i64)> 
    %81 = llvm.load %80 : !llvm.ptr -> !llvm.ptr
    %82 = llvm.call @fdopen(%79, %81) : (i32, !llvm.ptr) -> !llvm.ptr
    %83 = llvm.extractvalue %38[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %82, %83 : !llvm.ptr, !llvm.ptr
    %84 = llvm.extractvalue %38[1] : !llvm.struct<(ptr, ptr, i64)> 
    %85 = llvm.load %84 : !llvm.ptr -> !llvm.ptr
    %86 = llvm.extractvalue %45[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %85, %86 : !llvm.ptr, !llvm.ptr
    %87 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    %88 = llvm.load %87 : !llvm.ptr -> !llvm.ptr
    %89 = llvm.extractvalue %13[1] : !llvm.struct<(ptr, ptr, i64)> 
    %90 = llvm.load %89 : !llvm.ptr -> i32
    %91 = llvm.extractvalue %52[1] : !llvm.struct<(ptr, ptr, i64)> 
    %92 = llvm.load %91 : !llvm.ptr -> i32
    %93 = llvm.extractvalue %45[1] : !llvm.struct<(ptr, ptr, i64)> 
    %94 = llvm.load %93 : !llvm.ptr -> !llvm.ptr
    %95 = llvm.call @fwrite(%88, %90, %92, %94) : (!llvm.ptr, i32, i32, !llvm.ptr) -> i32
    %96 = llvm.extractvalue %61[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %95, %96 : i32, !llvm.ptr
    llvm.return
  }
  llvm.mlir.global internal @annonstr1("222") {addr_space = 0 : i32}
  llvm.func @main() attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.constant(1 : index) : i64
    %1 = llvm.alloca %0 x !llvm.ptr : (i64) -> !llvm.ptr
    %2 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(ptr, ptr, i64)> 
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.insertvalue %5, %4[2] : !llvm.struct<(ptr, ptr, i64)> 
    %7 = llvm.mlir.addressof @annonstr1 : !llvm.ptr
    %8 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %7, %8 : !llvm.ptr, !llvm.ptr
    %9 = llvm.mlir.constant(1 : index) : i64
    %10 = llvm.alloca %9 x !llvm.ptr : (i64) -> !llvm.ptr
    %11 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %12 = llvm.insertvalue %10, %11[0] : !llvm.struct<(ptr, ptr, i64)> 
    %13 = llvm.insertvalue %10, %12[1] : !llvm.struct<(ptr, ptr, i64)> 
    %14 = llvm.mlir.constant(0 : index) : i64
    %15 = llvm.insertvalue %14, %13[2] : !llvm.struct<(ptr, ptr, i64)> 
    %16 = llvm.mlir.constant(1 : index) : i64
    %17 = llvm.alloca %16 x i32 : (i64) -> !llvm.ptr
    %18 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %19 = llvm.insertvalue %17, %18[0] : !llvm.struct<(ptr, ptr, i64)> 
    %20 = llvm.insertvalue %17, %19[1] : !llvm.struct<(ptr, ptr, i64)> 
    %21 = llvm.mlir.constant(0 : index) : i64
    %22 = llvm.insertvalue %21, %20[2] : !llvm.struct<(ptr, ptr, i64)> 
    %23 = llvm.mlir.constant(1 : i32) : i32
    %24 = llvm.extractvalue %22[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %23, %24 : i32, !llvm.ptr
    %25 = llvm.mlir.constant(1 : index) : i64
    %26 = llvm.alloca %25 x i32 : (i64) -> !llvm.ptr
    %27 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %28 = llvm.insertvalue %26, %27[0] : !llvm.struct<(ptr, ptr, i64)> 
    %29 = llvm.insertvalue %26, %28[1] : !llvm.struct<(ptr, ptr, i64)> 
    %30 = llvm.mlir.constant(0 : index) : i64
    %31 = llvm.insertvalue %30, %29[2] : !llvm.struct<(ptr, ptr, i64)> 
    %32 = llvm.mlir.constant(0 : i32) : i32
    %33 = llvm.extractvalue %31[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %32, %33 : i32, !llvm.ptr
    %34 = llvm.mlir.constant(1 : index) : i64
    %35 = llvm.alloca %34 x i1 : (i64) -> !llvm.ptr
    %36 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %37 = llvm.insertvalue %35, %36[0] : !llvm.struct<(ptr, ptr, i64)> 
    %38 = llvm.insertvalue %35, %37[1] : !llvm.struct<(ptr, ptr, i64)> 
    %39 = llvm.mlir.constant(0 : index) : i64
    %40 = llvm.insertvalue %39, %38[2] : !llvm.struct<(ptr, ptr, i64)> 
    %41 = llvm.mlir.constant(1 : index) : i64
    %42 = llvm.alloca %41 x i32 : (i64) -> !llvm.ptr
    %43 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %44 = llvm.insertvalue %42, %43[0] : !llvm.struct<(ptr, ptr, i64)> 
    %45 = llvm.insertvalue %42, %44[1] : !llvm.struct<(ptr, ptr, i64)> 
    %46 = llvm.mlir.constant(0 : index) : i64
    %47 = llvm.insertvalue %46, %45[2] : !llvm.struct<(ptr, ptr, i64)> 
    %48 = llvm.mlir.constant(3 : i32) : i32
    %49 = llvm.extractvalue %47[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %48, %49 : i32, !llvm.ptr
    %50 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    %51 = llvm.load %50 : !llvm.ptr -> !llvm.ptr
    %52 = llvm.extractvalue %15[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %51, %52 : !llvm.ptr, !llvm.ptr
    %53 = llvm.extractvalue %22[1] : !llvm.struct<(ptr, ptr, i64)> 
    %54 = llvm.load %53 : !llvm.ptr -> i32
    %55 = llvm.extractvalue %31[1] : !llvm.struct<(ptr, ptr, i64)> 
    %56 = llvm.load %55 : !llvm.ptr -> i32
    %57 = llvm.icmp "slt" %54, %56 : i32
    %58 = llvm.extractvalue %40[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %57, %58 : i1, !llvm.ptr
    %59 = llvm.extractvalue %40[1] : !llvm.struct<(ptr, ptr, i64)> 
    %60 = llvm.load %59 : !llvm.ptr -> i1
    llvm.cond_br %60, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %61 = llvm.extractvalue %15[1] : !llvm.struct<(ptr, ptr, i64)> 
    %62 = llvm.load %61 : !llvm.ptr -> !llvm.ptr
    llvm.call @move_val(%62) : (!llvm.ptr) -> ()
    llvm.br ^bb3
  ^bb2:  // pred: ^bb0
    %63 = llvm.extractvalue %15[1] : !llvm.struct<(ptr, ptr, i64)> 
    %64 = llvm.load %63 : !llvm.ptr -> !llvm.ptr
    %65 = llvm.extractvalue %47[1] : !llvm.struct<(ptr, ptr, i64)> 
    %66 = llvm.load %65 : !llvm.ptr -> i32
    llvm.call @print(%64, %66) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb3
  ^bb3:  // 2 preds: ^bb1, ^bb2
    llvm.return
  }
  llvm.func @_mlir_ciface_main() attributes {llvm.emit_c_interface} {
    llvm.call @main() : () -> ()
    llvm.return
  }
  llvm.func @move_val(%arg0: !llvm.ptr) {
    %0 = llvm.mlir.constant(1 : index) : i64
    %1 = llvm.alloca %0 x !llvm.ptr : (i64) -> !llvm.ptr
    %2 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(ptr, ptr, i64)> 
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.insertvalue %5, %4[2] : !llvm.struct<(ptr, ptr, i64)> 
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.alloca %7 x !llvm.ptr : (i64) -> !llvm.ptr
    %9 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %10 = llvm.insertvalue %8, %9[0] : !llvm.struct<(ptr, ptr, i64)> 
    %11 = llvm.insertvalue %8, %10[1] : !llvm.struct<(ptr, ptr, i64)> 
    %12 = llvm.mlir.constant(0 : index) : i64
    %13 = llvm.insertvalue %12, %11[2] : !llvm.struct<(ptr, ptr, i64)> 
    %14 = llvm.extractvalue %6[1] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg0, %14 : !llvm.ptr, !llvm.ptr
    llvm.return
  }
}
