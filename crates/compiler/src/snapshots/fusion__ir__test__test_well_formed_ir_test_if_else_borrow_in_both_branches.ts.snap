---
source: crates/compiler/src/ir.rs
expression: "format!(\"{}\", ir_progam)"
---
IR:
fn 17:
block_4
0: 5_val = fnarg
1: 6_len = fnarg
2: 7_anonymous := Int(1)
3: borrow(7_anonymous)
4: 8_anonymous := "w"
5: borrow(8_anonymous)
6: receiver_Ssaid(9) = @0( let 7_anonymous, let 8_anonymous,)
7: borrow_end(7_anonymous)
8: borrow_end(8_anonymous)
9: 10_stdoutptr = 9_fdopen_result
10: move(9_fdopen_result)
11: borrow(5_val)
12: borrow(6_len)
13: 11_anonymous := Int(1)
14: borrow(11_anonymous)
15: borrow(10_stdoutptr)
16: receiver_Ssaid(12) = @2( let 5_val, let 6_len, let 11_anonymous, let 10_stdoutptr,)
17: borrow_end(5_val)
18: borrow_end(6_len)
19: borrow_end(11_anonymous)
20: borrow_end(10_stdoutptr)
21: return

fn 32:
block_13
0: 14_anonymous := "test"
1: 15_test = 14_anonymous
2: move(14_anonymous)
3: 16_anonymous := Int(1)
4: 17_anonymous := Int(0)
5: 18_@greater_than_result = 16_anonymous > 17_anonymous
6: move(16_anonymous)
7: move(17_anonymous)
8: if 18_@greater_than_result then 19_block else 21_block

block_19
0: borrow(15_test)
1: @35( let 15_test,)
2: borrow_end(15_test)

block_21
0: borrow(15_test)
1: @35( let 15_test,)
2: borrow_end(15_test)

block_20
0: return

block_20
0: return

fn 35:
block_22
0: 23_test = fnarg
1: return
