---
source: crates/compiler/src/ir.rs
expression: "format!(\"{}\", ir_progam)"
---
IR:
fn 17:
block_4
0: 5_val = fnarg
1: 6_len = fnarg
2: 7_anonymous := Int(1)
3: borrow(7_anonymous)
4: 8_anonymous := "w"
5: borrow(8_anonymous)
6: receiver_Ssaid(9) = @0( let 7_anonymous, let 8_anonymous,)
7: borrow_end(7_anonymous)
8: borrow_end(8_anonymous)
9: 10_stdoutptr = 9_fdopen_result
10: move(9_fdopen_result)
11: borrow(5_val)
12: borrow(6_len)
13: 11_anonymous := Int(1)
14: borrow(11_anonymous)
15: borrow(10_stdoutptr)
16: receiver_Ssaid(12) = @2( let 5_val, let 6_len, let 11_anonymous, let 10_stdoutptr,)
17: borrow_end(5_val)
18: borrow_end(6_len)
19: borrow_end(11_anonymous)
20: borrow_end(10_stdoutptr)
21: return

fn 38:
block_13
0: 14_anonymous := "test"
1: 15_test = 14_anonymous
2: move(14_anonymous)
3: 16_anonymous := Int(0)
4: 17_i = 16_anonymous
5: move(16_anonymous)
6: While block_BlockId(18)  { block_BlockId(21) }

block_18
0: 19_anonymous := Int(2)
1: 20_@less_than_result = 17_i < 19_anonymous
2: move(17_i)
3: move(19_anonymous)

block_21
0: borrow(15_test)
1: @44( let 15_test,)
2: borrow_end(15_test)
3: 22_anonymous := Int(1)
4: 23_@addition_result = 17_i + 22_anonymous
5: move(17_i)
6: move(22_anonymous)
7: 17_i = 23_@addition_result
8: move(23_@addition_result)

block_24
0: move(15_test)
1: @41( owned 15_test,)
2: return

fn 41:
block_25
0: 26_test = fnarg
1: return

fn 44:
block_27
0: 28_test = fnarg
1: return
