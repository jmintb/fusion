integer = { ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

string = { "\""	~ inner ~ "\"" }


identifier = {
	( ASCII_ALPHA | "_" )+
}

assignment = { "let " ~ identifier  ~ "=" ~  expression  }

assign = { identifier ~ "=" ~ expression }

inner = @{ char* }

operation = { primary ~ (infixOperator ~ primary )* }

while_loop = { "while" ~ condition ~ "{" ~ block ~ "}" }

infixOperator = _{
	addition | subtraction | division | multiplication | equal | not_equal | greater_than_or_equal | less_than_or_equal | greater_than | less_than   
	}

addition = { "+" }
subtraction = { "-" }
multiplication = { "*" }
division = { "/" }
equal = { "==" }
not_equal = { "!=" }
greater_than = { ">"}
less_than = { "<"}
greater_than_or_equal = { ">="}
less_than_or_equal = { "<="}

primary = _{ integer | "(" ~ expression ~ ")"}

reference = { "&" ~ expression }

boolean = {
	false | true
}

false = {"false"}
true = {"true"}

return = { "return" ~ expression? }

array = { "[" ~ ( expression ~ ",")* ~ expression? ~ "]"}

array_lookup = { identifier ~ "[" ~ expression ~ "]"}

expression = _{
	array | array_lookup | return | assign | if_else | if | while_loop | boolean | call | structInit | structFieldRef | integer | string | identifier | reference | operation    
}

condition = _{ expression }

array_type = { "[" ~ type ~ ";" ~ integer~ "]"}

signed_integer = { "integer" } 

unsigned_integer = { "u8"  }

string_type = { "str" }

named_type = { identifier }

pointer = { "ptr" }

type = {
	array_type | pointer | signed_integer | unsigned_integer | string_type | named_type
}

if_else = { "if" ~ condition ~ "{" ~ block ~ "}" ~ "else" ~ "{" ~ block ~ "}" }

if = { "if" ~ condition ~ "{" ~ block ~ "}" }

block = { stmt* }

char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

callArgs = { (expression ~ ",")* ~  expression? }

call = { identifier ~ "(" ~ callArgs? ~ ")" }

// TODO make function arg types parse properly
functionArg = { accessMode? ~ identifier ~ ( ":" ~ type) }

functionArgs = { ( functionArg ~ ",")* ~ functionArg }

accessMode = {
	letAccess | ownedAccess | inoutAccess
}

letAccess =  { "let" }

ownedAccess =  { "owned" }

inoutAccess =  { "inout" }

functionBody = { (stmt)* }

functionKeyword = { identifier* }
functionType = { "fn " | "extern fn "}

function = {   functionType ~ identifier ~ "(" ~ functionArgs? ~ ")" ~ ("->" ~ type )? ~  ( "{" ~ functionBody ~ "}" | ";") }

stmt = _{  function | struct |( (assignment  | expression  ) ~ ";"? )  }

structFieldDecl = { identifier ~ ":" ~ type }

struct = { "struct " ~ identifier ~ "{" ~  (structFieldDecl~ "," )* ~ structFieldDecl? ~ "}"    }


structInit = { identifier ~ "{" ~ ( expression ~ ",")* ~ expression ? ~ "}" }

structFieldRef = ${ identifier ~ "." ~ identifier }

program = _{ SOI ~  (stmt )*  ~ EOI }
         
