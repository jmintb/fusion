---
source: tests/e2e.rs
expression: "String::from_utf8(cmd.ok().unwrap().stdout)?"
---
module attributes {llvm.data_layout = ""} {
  llvm.func @fdopen(i32, !llvm.ptr) -> !llvm.ptr attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fclose(!llvm.ptr) attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fwrite(!llvm.ptr, i32, i32, !llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sprintf(!llvm.ptr, !llvm.ptr, i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fflush(!llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sleep(i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.mlir.global internal @annonstr0("w") {addr_space = 0 : i32}
  llvm.func @print(%arg0: !llvm.ptr, %arg1: i32) {
    %0 = llvm.mlir.constant(1 : index) : i64
    %1 = llvm.alloca %0 x !llvm.ptr : (i64) -> !llvm.ptr
    %2 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(ptr, ptr, i64)> 
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.insertvalue %5, %4[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg0, %1 : !llvm.ptr, !llvm.ptr
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.alloca %7 x i32 : (i64) -> !llvm.ptr
    %9 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %10 = llvm.insertvalue %8, %9[0] : !llvm.struct<(ptr, ptr, i64)> 
    %11 = llvm.insertvalue %8, %10[1] : !llvm.struct<(ptr, ptr, i64)> 
    %12 = llvm.mlir.constant(0 : index) : i64
    %13 = llvm.insertvalue %12, %11[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg1, %8 : i32, !llvm.ptr
    %14 = llvm.mlir.constant(1 : i32) : i32
    %15 = llvm.mlir.addressof @annonstr0 : !llvm.ptr
    %16 = llvm.call @fdopen(%14, %15) : (i32, !llvm.ptr) -> !llvm.ptr
    %17 = llvm.mlir.constant(1 : index) : i64
    %18 = llvm.alloca %17 x !llvm.ptr : (i64) -> !llvm.ptr
    %19 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %20 = llvm.insertvalue %18, %19[0] : !llvm.struct<(ptr, ptr, i64)> 
    %21 = llvm.insertvalue %18, %20[1] : !llvm.struct<(ptr, ptr, i64)> 
    %22 = llvm.mlir.constant(0 : index) : i64
    %23 = llvm.insertvalue %22, %21[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %16, %18 : !llvm.ptr, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %8 : !llvm.ptr -> i32
    %26 = llvm.mlir.constant(1 : i32) : i32
    %27 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.call @fwrite(%24, %25, %26, %27) : (!llvm.ptr, i32, i32, !llvm.ptr) -> i32
    llvm.return
  }
  llvm.mlir.global internal @annonstr1("a equals b \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr2("a equals c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr3("a not equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr4("a greater than c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr5("a greater than or equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr6("a greater than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr7("c less than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr8("a less than or equal to c \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr9("a less than or equal to a \0A") {addr_space = 0 : i32}
  llvm.mlir.global internal @annonstr10("c less than a \0A") {addr_space = 0 : i32}
  llvm.func @main() attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.constant(2 : i32) : i32
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.alloca %1 x i32 : (i64) -> !llvm.ptr
    %3 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %4 = llvm.insertvalue %2, %3[0] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.insertvalue %2, %4[1] : !llvm.struct<(ptr, ptr, i64)> 
    %6 = llvm.mlir.constant(0 : index) : i64
    %7 = llvm.insertvalue %6, %5[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %0, %2 : i32, !llvm.ptr
    %8 = llvm.mlir.constant(2 : i32) : i32
    %9 = llvm.mlir.constant(1 : index) : i64
    %10 = llvm.alloca %9 x i32 : (i64) -> !llvm.ptr
    %11 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %12 = llvm.insertvalue %10, %11[0] : !llvm.struct<(ptr, ptr, i64)> 
    %13 = llvm.insertvalue %10, %12[1] : !llvm.struct<(ptr, ptr, i64)> 
    %14 = llvm.mlir.constant(0 : index) : i64
    %15 = llvm.insertvalue %14, %13[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %8, %10 : i32, !llvm.ptr
    %16 = llvm.mlir.constant(1 : i32) : i32
    %17 = llvm.mlir.constant(1 : index) : i64
    %18 = llvm.alloca %17 x i32 : (i64) -> !llvm.ptr
    %19 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %20 = llvm.insertvalue %18, %19[0] : !llvm.struct<(ptr, ptr, i64)> 
    %21 = llvm.insertvalue %18, %20[1] : !llvm.struct<(ptr, ptr, i64)> 
    %22 = llvm.mlir.constant(0 : index) : i64
    %23 = llvm.insertvalue %22, %21[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %16, %18 : i32, !llvm.ptr
    %24 = llvm.load %2 : !llvm.ptr -> i32
    %25 = llvm.load %10 : !llvm.ptr -> i32
    %26 = llvm.icmp "eq" %24, %25 : i32
    llvm.cond_br %26, ^bb1, ^bb2
  ^bb1:  // pred: ^bb0
    %27 = llvm.mlir.addressof @annonstr1 : !llvm.ptr
    %28 = llvm.mlir.constant(12 : i32) : i32
    llvm.call @print(%27, %28) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb2
  ^bb2:  // 2 preds: ^bb0, ^bb1
    %29 = llvm.load %2 : !llvm.ptr -> i32
    %30 = llvm.load %18 : !llvm.ptr -> i32
    %31 = llvm.icmp "eq" %29, %30 : i32
    llvm.cond_br %31, ^bb3, ^bb4
  ^bb3:  // pred: ^bb2
    %32 = llvm.mlir.addressof @annonstr2 : !llvm.ptr
    %33 = llvm.mlir.constant(12 : i32) : i32
    llvm.call @print(%32, %33) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb4
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %34 = llvm.load %2 : !llvm.ptr -> i32
    %35 = llvm.load %18 : !llvm.ptr -> i32
    %36 = llvm.icmp "ne" %34, %35 : i32
    llvm.cond_br %36, ^bb5, ^bb6
  ^bb5:  // pred: ^bb4
    %37 = llvm.mlir.addressof @annonstr3 : !llvm.ptr
    %38 = llvm.mlir.constant(20 : i32) : i32
    llvm.call @print(%37, %38) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb6
  ^bb6:  // 2 preds: ^bb4, ^bb5
    %39 = llvm.load %2 : !llvm.ptr -> i32
    %40 = llvm.load %18 : !llvm.ptr -> i32
    %41 = llvm.icmp "sgt" %39, %40 : i32
    llvm.cond_br %41, ^bb7, ^bb8
  ^bb7:  // pred: ^bb6
    %42 = llvm.mlir.addressof @annonstr4 : !llvm.ptr
    %43 = llvm.mlir.constant(18 : i32) : i32
    llvm.call @print(%42, %43) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb8
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %44 = llvm.load %2 : !llvm.ptr -> i32
    %45 = llvm.load %18 : !llvm.ptr -> i32
    %46 = llvm.icmp "sge" %44, %45 : i32
    llvm.cond_br %46, ^bb9, ^bb10
  ^bb9:  // pred: ^bb8
    %47 = llvm.mlir.addressof @annonstr5 : !llvm.ptr
    %48 = llvm.mlir.constant(30 : i32) : i32
    llvm.call @print(%47, %48) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb10
  ^bb10:  // 2 preds: ^bb8, ^bb9
    %49 = llvm.load %2 : !llvm.ptr -> i32
    %50 = llvm.load %2 : !llvm.ptr -> i32
    %51 = llvm.icmp "sge" %49, %50 : i32
    llvm.cond_br %51, ^bb11, ^bb12
  ^bb11:  // pred: ^bb10
    %52 = llvm.mlir.addressof @annonstr6 : !llvm.ptr
    %53 = llvm.mlir.constant(30 : i32) : i32
    llvm.call @print(%52, %53) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb12
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %54 = llvm.load %18 : !llvm.ptr -> i32
    %55 = llvm.load %2 : !llvm.ptr -> i32
    %56 = llvm.icmp "sle" %54, %55 : i32
    llvm.cond_br %56, ^bb13, ^bb14
  ^bb13:  // pred: ^bb12
    %57 = llvm.mlir.addressof @annonstr7 : !llvm.ptr
    %58 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%57, %58) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb14
  ^bb14:  // 2 preds: ^bb12, ^bb13
    %59 = llvm.load %2 : !llvm.ptr -> i32
    %60 = llvm.load %18 : !llvm.ptr -> i32
    %61 = llvm.icmp "sle" %59, %60 : i32
    llvm.cond_br %61, ^bb15, ^bb16
  ^bb15:  // pred: ^bb14
    %62 = llvm.mlir.addressof @annonstr8 : !llvm.ptr
    %63 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%62, %63) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb16
  ^bb16:  // 2 preds: ^bb14, ^bb15
    %64 = llvm.load %2 : !llvm.ptr -> i32
    %65 = llvm.load %2 : !llvm.ptr -> i32
    %66 = llvm.icmp "sle" %64, %65 : i32
    llvm.cond_br %66, ^bb17, ^bb18
  ^bb17:  // pred: ^bb16
    %67 = llvm.mlir.addressof @annonstr9 : !llvm.ptr
    %68 = llvm.mlir.constant(27 : i32) : i32
    llvm.call @print(%67, %68) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb18
  ^bb18:  // 2 preds: ^bb16, ^bb17
    %69 = llvm.load %18 : !llvm.ptr -> i32
    %70 = llvm.load %2 : !llvm.ptr -> i32
    %71 = llvm.icmp "slt" %69, %70 : i32
    llvm.cond_br %71, ^bb19, ^bb20
  ^bb19:  // pred: ^bb18
    %72 = llvm.mlir.addressof @annonstr10 : !llvm.ptr
    %73 = llvm.mlir.constant(18 : i32) : i32
    llvm.call @print(%72, %73) : (!llvm.ptr, i32) -> ()
    llvm.br ^bb20
  ^bb20:  // 2 preds: ^bb18, ^bb19
    llvm.return
  }
  llvm.func @_mlir_ciface_main() attributes {llvm.emit_c_interface} {
    llvm.call @main() : () -> ()
    llvm.return
  }
}


