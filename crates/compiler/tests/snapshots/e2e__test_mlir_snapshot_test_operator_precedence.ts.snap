---
source: tests/e2e.rs
expression: "String::from_utf8(cmd.ok().unwrap().stdout)?"
---
module attributes {llvm.data_layout = ""} {
  llvm.func @fdopen(i32, !llvm.ptr) -> !llvm.ptr attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fclose(!llvm.ptr) attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fwrite(!llvm.ptr, i32, i32, !llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sprintf(!llvm.ptr, !llvm.ptr, i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @fflush(!llvm.ptr) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.func @sleep(i32) -> i32 attributes {llvm.emit_c_interface, sym_visibility = "private"}
  llvm.mlir.global internal @annonstr0("w") {addr_space = 0 : i32}
  llvm.func @print(%arg0: !llvm.ptr, %arg1: i32) {
    %0 = llvm.mlir.constant(1 : index) : i64
    %1 = llvm.alloca %0 x !llvm.ptr : (i64) -> !llvm.ptr
    %2 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %3 = llvm.insertvalue %1, %2[0] : !llvm.struct<(ptr, ptr, i64)> 
    %4 = llvm.insertvalue %1, %3[1] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.mlir.constant(0 : index) : i64
    %6 = llvm.insertvalue %5, %4[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg0, %1 : !llvm.ptr, !llvm.ptr
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.alloca %7 x i32 : (i64) -> !llvm.ptr
    %9 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %10 = llvm.insertvalue %8, %9[0] : !llvm.struct<(ptr, ptr, i64)> 
    %11 = llvm.insertvalue %8, %10[1] : !llvm.struct<(ptr, ptr, i64)> 
    %12 = llvm.mlir.constant(0 : index) : i64
    %13 = llvm.insertvalue %12, %11[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %arg1, %8 : i32, !llvm.ptr
    %14 = llvm.mlir.constant(1 : i32) : i32
    %15 = llvm.mlir.addressof @annonstr0 : !llvm.ptr
    %16 = llvm.call @fdopen(%14, %15) : (i32, !llvm.ptr) -> !llvm.ptr
    %17 = llvm.mlir.constant(1 : index) : i64
    %18 = llvm.alloca %17 x !llvm.ptr : (i64) -> !llvm.ptr
    %19 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %20 = llvm.insertvalue %18, %19[0] : !llvm.struct<(ptr, ptr, i64)> 
    %21 = llvm.insertvalue %18, %20[1] : !llvm.struct<(ptr, ptr, i64)> 
    %22 = llvm.mlir.constant(0 : index) : i64
    %23 = llvm.insertvalue %22, %21[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %16, %18 : !llvm.ptr, !llvm.ptr
    %24 = llvm.load %1 : !llvm.ptr -> !llvm.ptr
    %25 = llvm.load %8 : !llvm.ptr -> i32
    %26 = llvm.mlir.constant(1 : i32) : i32
    %27 = llvm.load %18 : !llvm.ptr -> !llvm.ptr
    %28 = llvm.call @fwrite(%24, %25, %26, %27) : (!llvm.ptr, i32, i32, !llvm.ptr) -> i32
    llvm.return
  }
  llvm.mlir.global internal @annonstr1("resultb: %d \0A") {addr_space = 0 : i32}
  llvm.func @main() attributes {llvm.emit_c_interface} {
    %0 = llvm.mlir.constant(2 : i32) : i32
    %1 = llvm.mlir.constant(1 : index) : i64
    %2 = llvm.alloca %1 x i32 : (i64) -> !llvm.ptr
    %3 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %4 = llvm.insertvalue %2, %3[0] : !llvm.struct<(ptr, ptr, i64)> 
    %5 = llvm.insertvalue %2, %4[1] : !llvm.struct<(ptr, ptr, i64)> 
    %6 = llvm.mlir.constant(0 : index) : i64
    %7 = llvm.insertvalue %6, %5[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %0, %2 : i32, !llvm.ptr
    %8 = llvm.mlir.constant(4 : i32) : i32
    %9 = llvm.mlir.constant(1 : index) : i64
    %10 = llvm.alloca %9 x i32 : (i64) -> !llvm.ptr
    %11 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %12 = llvm.insertvalue %10, %11[0] : !llvm.struct<(ptr, ptr, i64)> 
    %13 = llvm.insertvalue %10, %12[1] : !llvm.struct<(ptr, ptr, i64)> 
    %14 = llvm.mlir.constant(0 : index) : i64
    %15 = llvm.insertvalue %14, %13[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %8, %10 : i32, !llvm.ptr
    %16 = llvm.mlir.constant(3 : i32) : i32
    %17 = llvm.mlir.constant(1 : index) : i64
    %18 = llvm.alloca %17 x i32 : (i64) -> !llvm.ptr
    %19 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %20 = llvm.insertvalue %18, %19[0] : !llvm.struct<(ptr, ptr, i64)> 
    %21 = llvm.insertvalue %18, %20[1] : !llvm.struct<(ptr, ptr, i64)> 
    %22 = llvm.mlir.constant(0 : index) : i64
    %23 = llvm.insertvalue %22, %21[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %16, %18 : i32, !llvm.ptr
    %24 = llvm.load %18 : !llvm.ptr -> i32
    %25 = llvm.load %2 : !llvm.ptr -> i32
    %26 = llvm.add %24, %25  : i32
    %27 = llvm.load %10 : !llvm.ptr -> i32
    %28 = llvm.mul %26, %27  : i32
    %29 = llvm.mlir.constant(1 : index) : i64
    %30 = llvm.alloca %29 x i32 : (i64) -> !llvm.ptr
    %31 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %32 = llvm.insertvalue %30, %31[0] : !llvm.struct<(ptr, ptr, i64)> 
    %33 = llvm.insertvalue %30, %32[1] : !llvm.struct<(ptr, ptr, i64)> 
    %34 = llvm.mlir.constant(0 : index) : i64
    %35 = llvm.insertvalue %34, %33[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %28, %30 : i32, !llvm.ptr
    %36 = llvm.mlir.addressof @annonstr1 : !llvm.ptr
    %37 = llvm.mlir.constant(1 : index) : i64
    %38 = llvm.alloca %37 x !llvm.ptr : (i64) -> !llvm.ptr
    %39 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64)>
    %40 = llvm.insertvalue %38, %39[0] : !llvm.struct<(ptr, ptr, i64)> 
    %41 = llvm.insertvalue %38, %40[1] : !llvm.struct<(ptr, ptr, i64)> 
    %42 = llvm.mlir.constant(0 : index) : i64
    %43 = llvm.insertvalue %42, %41[2] : !llvm.struct<(ptr, ptr, i64)> 
    llvm.store %36, %38 : !llvm.ptr, !llvm.ptr
    %44 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    %45 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    %46 = llvm.load %30 : !llvm.ptr -> i32
    %47 = llvm.call @sprintf(%44, %45, %46) : (!llvm.ptr, !llvm.ptr, i32) -> i32
    %48 = llvm.load %38 : !llvm.ptr -> !llvm.ptr
    %49 = llvm.mlir.constant(13 : i32) : i32
    llvm.call @print(%48, %49) : (!llvm.ptr, i32) -> ()
    llvm.return
  }
  llvm.func @_mlir_ciface_main() attributes {llvm.emit_c_interface} {
    llvm.call @main() : () -> ()
    llvm.return
  }
}


