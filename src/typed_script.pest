integer = { ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

string = { "\""	~ inner ~ "\"" }


identifier = {
	( ASCII_ALPHA | "_" )+
}

assignment = { "let " ~ identifier  ~ "=" ~  expression  }

inner = @{ char* }


operation = { primary ~ (infixOperator ~ primary )* }

infixOperator = _{
	addition | subtraction | division | multiplication
}

addition = { "+" }
subtraction = { "-" }
multiplication = { "*" }
division = { "/" }

primary = _{ integer | "(" ~ expression ~ ")"}

reference = { "&" ~ expression }

boolean = {
	false | true
}

false = {"false"}
true = {"true"}

expression = _{
	boolean | call | structInit | structFieldRef | integer | string | identifier | reference | operation  
}

condition = _{ expression }

if = {"if" ~ condition ~ "{" ~ functionBody ~ "}"}

char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

callArgs = { (expression ~ ",")* ~  expression? }

call = { identifier ~ "(" ~ callArgs? ~ ")" }

// TODO make function arg types parse properly
functionArg = { identifier ~ ( ":" ~ identifier)? }

functionArgs = { ( functionArg ~ ",")* ~ functionArg }

functionBody = { (stmt)* }

functionKeyword = { identifier* }
functionType = { "fn " | "extern fn "}

function = {   functionType ~ identifier ~ "(" ~ functionArgs? ~ ")" ~ ("->" ~ identifier)? ~  ( "{" ~ functionBody ~ "}" | ";") }

stmt = _{  if | function | struct |( (assignment  | expression  ) ~ ";"? )  }


struct = { "struct " ~ identifier ~ "{" ~  (identifier ~ "," )* ~ identifier? ~ "}"    }

structInit = { identifier ~ "{" ~ ( expression ~ ",")* ~ expression? ~ "}" }

structFieldRef = ${ identifier ~ "." ~ identifier }

program = _{ SOI ~  (stmt )*  ~ EOI }
         
