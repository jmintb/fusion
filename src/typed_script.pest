integer = { ASCII_DIGIT+ }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

string = { "\""	~ inner ~ "\"" }


identifier = {
	ASCII_ALPHA+
}

assignment = { "let " ~ identifier  ~ "=" ~  expression  }

inner = @{ char* }

expression = _{
	 call | structInit | structFieldRef | integer | string | identifier     
}

char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

callArgs = { (expression ~ ",")* ~  expression? }

call = { identifier ~ "(" ~ callArgs? ~ ")" }

// TODO make function arg types parse properly
functionArg = { identifier ~ ( ":" ~ identifier)? }

functionArgs = { ( functionArg ~ ",")* ~ functionArg }

functionBody = { (stmt)* }

function = { "pub "? ~ "extern "? ~ "fn " ~ identifier ~ "(" ~ functionArgs? ~ ")" ~  ( "{" ~ functionBody ~ "}" | ";") }

stmt = _{ function | struct |( (assignment  | expression  ) ~ ";"? ) }

struct = { "struct " ~ identifier ~ "{" ~  (identifier ~ "," )* ~ identifier? ~ "}"    }

structInit = { identifier ~ "{" ~ ( expression ~ ",")* ~ expression? ~ "}" }

structFieldRef = ${ identifier ~ "." ~ identifier }

program = _{ SOI ~  (stmt )*  ~ EOI }
         
